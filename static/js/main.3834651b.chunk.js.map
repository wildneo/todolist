{"version":3,"sources":["actions/index.js","reducers/tasks.js","reducers/topPanel.js","reducers/index.js","components/NewTaskForm.jsx","components/Menu.jsx","components/TopPanel.jsx","components/Filter.jsx","components/Task.jsx","selectors/index.js","components/TasksList.jsx","components/App.jsx","index.js"],"names":["addNewTask","createAction","removeTask","toggleTask","clearTasks","setTasksFilter","toggleUITop","defaultState","byId","allIds","currentFilterName","handleActions","actions","state","task","payload","id","updatedTask","complete","active","omit","without","filterName","formUIState","show","hide","combineReducers","tasks","topPanelUIState","form","formReducer","actionsList","ConnectedNewTaskForm","connect","props","handleSubmit","submitting","pristine","Transition","transitionOnMount","animation","Form","onSubmit","text","reset","uniqueId","autoComplete","Group","widths","className","Field","name","type","component","Input","placeholder","required","Button","disabled","content","positive","basic","onClick","reduxForm","handleRandom","times","lorem","sentence","handleClearTasks","handleShowForm","Container","Popup","trigger","floated","icon","Dropdown","button","Menu","Item","Segment","vertical","filters","handleClick","labeled","map","title","key","value","Task","isHovered","handleEnter","bind","handleLeave","handleToggleState","handleTaskRemove","this","setState","textEclipse","cn","circle","List","onMouseEnter","onMouseLeave","visible","color","Icon","verticalAlign","link","Content","React","Component","tasksSelector","createSelector","filteredTasksSelector","filter","t","items","length","textAlign","Header","as","Subheader","size","divided","App","inverted","ext","window","__REDUX_DEVTOOLS_EXTENSION__","devtoolMiddleware","store","createStore","reducers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3834651b.chunk.js","sourcesContent":["import { createAction } from 'redux-actions';\r\n\r\nexport const addNewTask = createAction('TASK_ADD');\r\nexport const removeTask = createAction('TASK_REMOVE');\r\nexport const toggleTask = createAction('TASK_TOGGLE');\r\nexport const clearTasks = createAction('TASK_CLEAR');\r\nexport const setTasksFilter = createAction('TASK_FILTER_SET');\r\nexport const toggleUITop = createAction('UI_TOGGLE_TOP');\r\n","import { handleActions } from 'redux-actions';\r\nimport without from 'lodash.without';\r\nimport omit from 'lodash.omit';\r\nimport * as actions from '../actions';\r\n\r\nconst defaultState = {\r\n  byId: {},\r\n  allIds: [],\r\n  currentFilterName: 'all',\r\n};\r\n\r\nexport default handleActions({\r\n  [actions.addNewTask]: (state, { payload: { task } }) => {\r\n    const { byId, allIds } = state;\r\n\r\n    return {\r\n      ...state,\r\n      byId: { ...byId, [task.id]: task },\r\n      allIds: [task.id, ...allIds],\r\n    };\r\n  },\r\n\r\n  [actions.toggleTask]: (state, { payload: { id } }) => {\r\n    const task = state.byId[id];\r\n    const mapping = {\r\n      complete: 'active',\r\n      active: 'complete',\r\n    };\r\n    const updatedTask = { ...task, state: mapping[task.state] };\r\n\r\n    return {\r\n      ...state,\r\n      byId: { ...state.byId, [id]: updatedTask },\r\n    };\r\n  },\r\n\r\n  [actions.removeTask]: (state, { payload: { id } }) => {\r\n    const { byId, allIds } = state;\r\n\r\n    return {\r\n      ...state,\r\n      byId: omit(byId, id),\r\n      allIds: without(allIds, id),\r\n    };\r\n  },\r\n\r\n  [actions.setTasksFilter]: (state, { payload: { filterName } }) => ({\r\n    ...state,\r\n    currentFilterName: filterName,\r\n  }),\r\n\r\n  [actions.clearTasks]: () => defaultState,\r\n\r\n}, defaultState);\r\n","import { handleActions } from 'redux-actions';\r\nimport * as actions from '../actions';\r\n\r\nconst defaultState = {\r\n  formUIState: 'hide',\r\n};\r\n\r\nexport default handleActions({\r\n  [actions.toggleUITop]: ({ formUIState }) => {\r\n    const mapping = {\r\n      show: 'hide',\r\n      hide: 'show',\r\n    };\r\n\r\n    return { formUIState: mapping[formUIState] };\r\n  },\r\n}, defaultState);\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport tasks from './tasks';\r\nimport topPanelUIState from './topPanel';\r\n\r\nexport default combineReducers({\r\n  tasks,\r\n  topPanelUIState,\r\n  form: formReducer,\r\n});\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Button, Form, Transition } from 'semantic-ui-react';\r\nimport uniqueId from 'lodash.uniqueid';\r\nimport * as actions from '../actions';\r\n\r\nconst actionsList = {\r\n  addNewTask: actions.addNewTask,\r\n  toggleUITop: actions.toggleUITop,\r\n};\r\n\r\nconst NewTaskForm = (props) => {\r\n  const addTask = ({ text }) => {\r\n    const { addNewTask, toggleUITop, reset } = props;\r\n    const newTask = {\r\n      id: uniqueId(),\r\n      state: 'active',\r\n      text,\r\n    };\r\n    addNewTask({ task: newTask });\r\n    toggleUITop();\r\n    reset();\r\n  };\r\n\r\n  const closeForm = () => {\r\n    const { toggleUITop } = props;\r\n    toggleUITop();\r\n  };\r\n\r\n  const { handleSubmit, submitting, pristine } = props;\r\n\r\n  return (\r\n    <Transition\r\n      transitionOnMount\r\n      animation=\"fade down\"\r\n    >\r\n      <Form\r\n        onSubmit={handleSubmit(addTask)}\r\n        autoComplete=\"off\"\r\n      >\r\n        <Form.Group\r\n          widths=\"equal\"\r\n          className=\"margined\"\r\n        >\r\n          <Field\r\n            name=\"text\"\r\n            type=\"text\"\r\n            component={Form.Input}\r\n            placeholder=\"I want to do...\"\r\n            required\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            disabled={pristine || submitting}\r\n            content=\"Add\"\r\n            positive\r\n            basic\r\n          />\r\n          <Button\r\n            onClick={closeForm}\r\n            type=\"button\"\r\n            content=\"Cancel\"\r\n            basic\r\n          />\r\n        </Form.Group>\r\n      </Form>\r\n    </Transition>\r\n  );\r\n};\r\n\r\nconst ConnectedNewTaskForm = connect(null, actionsList)(NewTaskForm);\r\n\r\nexport default reduxForm({ form: 'newTask' })(ConnectedNewTaskForm);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n// eslint-disable-next-line object-curly-newline\r\nimport { Container, Button, Dropdown, Transition, Popup } from 'semantic-ui-react';\r\nimport uniqueId from 'lodash.uniqueid';\r\nimport times from 'lodash.times';\r\nimport { lorem } from 'faker';\r\nimport * as actions from '../actions';\r\n\r\nconst actionsList = {\r\n  addNewTask: actions.addNewTask,\r\n  clearTasks: actions.clearTasks,\r\n  toggleUITop: actions.toggleUITop,\r\n};\r\n\r\nconst Menu = (props) => {\r\n  const handleRandom = () => {\r\n    const { addNewTask, clearTasks } = props;\r\n    clearTasks();\r\n    times(5, () => (\r\n      addNewTask({\r\n        task: {\r\n          id: uniqueId(),\r\n          text: lorem.sentence(),\r\n          state: 'active',\r\n        },\r\n      })\r\n    ));\r\n  };\r\n\r\n  const handleClearTasks = () => {\r\n    const { clearTasks } = props;\r\n    clearTasks();\r\n  };\r\n\r\n  const handleShowForm = () => {\r\n    const { toggleUITop } = props;\r\n    toggleUITop();\r\n  };\r\n\r\n  const renderAddTaskBtn = () => (\r\n    <Popup\r\n      content=\"Add new task\"\r\n      trigger={(\r\n        <Button\r\n          onClick={handleShowForm}\r\n          floated=\"right\"\r\n          icon=\"plus\"\r\n          basic\r\n        />\r\n      )}\r\n    />\r\n  );\r\n\r\n  const renderOptionsBtn = () => (\r\n    <Popup\r\n      content=\"Additional option\"\r\n      trigger={(\r\n        <Dropdown\r\n          className=\"basic icon\"\r\n          icon=\"ellipsis vertical\"\r\n          button\r\n        >\r\n          <Dropdown.Menu>\r\n            <Dropdown.Item\r\n              onClick={handleRandom}\r\n              text=\"Random tasks\"\r\n            />\r\n            <Dropdown.Item\r\n              onClick={handleClearTasks}\r\n              text=\"Clear all\"\r\n            />\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      )}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Transition transitionOnMount>\r\n      <Container className=\"margined\">\r\n        {renderAddTaskBtn()}\r\n        {renderOptionsBtn()}\r\n      </Container>\r\n    </Transition>\r\n  );\r\n};\r\n\r\nexport default connect(null, actionsList)(Menu);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport NewTaskForm from './NewTaskForm';\r\nimport Menu from './Menu';\r\n\r\nconst mapStateToProps = ({ topPanelUIState }) => {\r\n  const props = topPanelUIState;\r\n  return props;\r\n};\r\n\r\nconst TopPanel = (props) => {\r\n  const { formUIState } = props;\r\n\r\n  return (\r\n    <Segment vertical>\r\n      {formUIState === 'show'\r\n        ? <NewTaskForm />\r\n        : <Menu />}\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps)(TopPanel);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Segment, Dropdown } from 'semantic-ui-react';\r\nimport * as actions from '../actions';\r\n\r\nconst mapStateToProps = ({ tasks: { currentFilterName } }) => {\r\n  const props = { currentFilterName };\r\n\r\n  return props;\r\n};\r\n\r\nconst actionsList = {\r\n  setTasksFilter: actions.setTasksFilter,\r\n};\r\n\r\nconst filters = [\r\n  ['all', 'All Tasks'],\r\n  ['active', 'Active Tasks'],\r\n  ['complete', 'Completed Tasks'],\r\n];\r\n\r\nconst Filter = (props) => {\r\n  const handleClick = (filterName) => () => {\r\n    const { setTasksFilter } = props;\r\n    setTasksFilter({ filterName });\r\n  };\r\n\r\n  const renderFilter = ([filterName, title]) => (\r\n    <Dropdown.Item\r\n      onClick={handleClick(filterName)}\r\n      key={filterName}\r\n      value={title}\r\n      text={title}\r\n    />\r\n  );\r\n\r\n  const { currentFilterName } = props;\r\n\r\n  return (\r\n    <Segment vertical>\r\n      <Dropdown\r\n        className=\"basic icon\"\r\n        text={currentFilterName}\r\n        labeled\r\n        button\r\n        icon=\"filter\"\r\n      >\r\n        <Dropdown.Menu\r\n          content={filters.map(renderFilter)}\r\n        />\r\n      </Dropdown>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, actionsList)(Filter);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, List, Transition } from 'semantic-ui-react';\r\nimport cn from 'classnames';\r\nimport * as actions from '../actions';\r\n\r\nconst actionsList = {\r\n  toggleTask: actions.toggleTask,\r\n  removeTask: actions.removeTask,\r\n};\r\n\r\nclass Task extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { isHovered: false };\r\n\r\n    this.handleEnter = this.handleEnter.bind(this);\r\n    this.handleLeave = this.handleLeave.bind(this);\r\n    this.handleToggleState = this.handleToggleState.bind(this);\r\n    this.handleTaskRemove = this.handleTaskRemove.bind(this);\r\n  }\r\n\r\n  handleEnter() {\r\n    this.setState({ isHovered: true });\r\n  }\r\n\r\n  handleLeave() {\r\n    this.setState({ isHovered: false });\r\n  }\r\n\r\n  handleToggleState() {\r\n    const { toggleTask, task: { id } } = this.props;\r\n    toggleTask({ id });\r\n  }\r\n\r\n  handleTaskRemove() {\r\n    const { removeTask, task: { id } } = this.props;\r\n    removeTask({ id });\r\n  }\r\n\r\n  render() {\r\n    const { isHovered } = this.state;\r\n    const { task: { text, state } } = this.props;\r\n    const textEclipse = cn({ 'text-eclipse': isHovered });\r\n    const active = state === 'active';\r\n    const circle = active ? 'circle outline' : 'check circle outline';\r\n\r\n    return (\r\n      <List.Item\r\n        active={active}\r\n        className=\"task\"\r\n        onMouseEnter={this.handleEnter}\r\n        onMouseLeave={this.handleLeave}\r\n      >\r\n        <Transition visible={isHovered}>\r\n          <Button.Group className=\"pop-up-buttons\">\r\n            <Button\r\n              onClick={this.handleTaskRemove}\r\n              icon=\"trash alternate outline\"\r\n              color=\"red\"\r\n              basic\r\n            />\r\n          </Button.Group>\r\n        </Transition>\r\n        <List.Icon\r\n          onClick={this.handleToggleState}\r\n          verticalAlign=\"middle\"\r\n          name={circle}\r\n          link\r\n        />\r\n        <List.Content className={textEclipse}>\r\n          <span>{text}</span>\r\n        </List.Content>\r\n      </List.Item>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, actionsList)(Task);\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getTasksById = (state) => state.tasks.byId;\r\nconst getTaskIds = (state) => state.tasks.allIds;\r\nconst getCurrentFilterName = (state) => state.tasks.currentFilterName;\r\n\r\nexport const tasksSelector = createSelector(\r\n  [getTasksById, getTaskIds],\r\n  (byId, allIds) => allIds.map((id) => byId[id]),\r\n);\r\n\r\nexport const filteredTasksSelector = createSelector(\r\n  [tasksSelector, getCurrentFilterName],\r\n  (tasks, filterName) => (filterName === 'all' ? tasks : tasks.filter((t) => t.state === filterName)),\r\n);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n// eslint-disable-next-line object-curly-newline\r\nimport { Segment, Icon, Header, List } from 'semantic-ui-react';\r\nimport Task from './Task';\r\nimport { filteredTasksSelector } from '../selectors';\r\n\r\nconst mapStateToProps = (state) => {\r\n  const tasks = filteredTasksSelector(state);\r\n  return { tasks };\r\n};\r\n\r\nconst TasksList = (props) => {\r\n  const { tasks } = props;\r\n  const items = tasks.map((task) => <Task key={task.id} task={task} />);\r\n\r\n  if (tasks.length === 0) {\r\n    return (\r\n      <Segment\r\n        textAlign=\"center\"\r\n        vertical\r\n      >\r\n        <Header\r\n          as=\"h2\"\r\n          color=\"grey\"\r\n          icon\r\n        >\r\n          <Icon name=\"cancel\" />\r\n          <Header.Content\r\n            content=\"There are no tasks\"\r\n          />\r\n          <Header.Subheader\r\n            content=\"To get started, add some items to your list.\"\r\n          />\r\n        </Header>\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Segment vertical>\r\n      <List\r\n        content={items}\r\n        verticalAlign=\"middle\"\r\n        size=\"huge\"\r\n        divided\r\n        link\r\n      />\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps)(TasksList);\r\n","/* eslint-disable object-curly-newline */\r\nimport React from 'react';\r\nimport { Container, Segment, Header, Icon } from 'semantic-ui-react';\r\nimport TopPanel from './TopPanel';\r\nimport Filter from './Filter';\r\nimport TasksList from './TasksList';\r\n\r\nconst App = () => (\r\n  <>\r\n    <Segment\r\n      basic\r\n      textAlign=\"center\"\r\n      inverted\r\n    >\r\n      <Container text>\r\n        <Header\r\n          as=\"h1\"\r\n          inverted\r\n        >\r\n          <Icon name=\"tasks\" />\r\n          <Header.Content\r\n            content=\"ToDo\"\r\n          />\r\n        </Header>\r\n      </Container>\r\n    </Segment>\r\n    <Container text>\r\n      <Segment>\r\n        <TopPanel />\r\n        <TasksList />\r\n        <Filter />\r\n      </Segment>\r\n    </Container>\r\n  </>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport reducers from './reducers';\r\nimport App from './components/App';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './index.css';\r\n\r\n/* eslint-disable no-underscore-dangle */\r\nconst ext = window.__REDUX_DEVTOOLS_EXTENSION__;\r\nconst devtoolMiddleware = ext && ext();\r\n/* eslint-enable */\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  devtoolMiddleware,\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}